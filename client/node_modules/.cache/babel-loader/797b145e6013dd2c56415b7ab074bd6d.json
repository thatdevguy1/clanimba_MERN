{"ast":null,"code":"import _toConsumableArray from\"/home/davidbland/Documents/projects/clanimba_MERN/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/home/davidbland/Documents/projects/clanimba_MERN/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(source,true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(source).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import*as actionTypes from'../action/actions';var initialState={battletag:'',icon:'',guild:'',token:null,post:[]};var reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case actionTypes.SAVE_USER:return _objectSpread({},state,{battletag:action.result.data.battleTag,icon:action.result.data.charImg,guild:action.result.data.guild});//SAVING POSTS TO DB\ncase actionTypes.SAVE_MSG:if(state.post.filter(function(e){return e._id===action.result.data._id;}).length>0){var post=state.post.map(function(post){if(post._id!=action.result.data._id){return post;}return action.result.data;});}else{var post=[].concat(_toConsumableArray(state.post),[action.result.data]);}return _objectSpread({},state,{post:post});//GETTING POSTS FROM DB (bad naming for case)\ncase actionTypes.SAVE_POSTS:console.log(\"getting posts reached in reducer\"+JSON.stringify(action.result.data));return _objectSpread({},state,{post:action.result.data});};return state;};export default reducer;","map":{"version":3,"sources":["/home/davidbland/Documents/projects/clanimba_MERN/client/src/store/reducer/reducer.js"],"names":["actionTypes","initialState","battletag","icon","guild","token","post","reducer","state","action","type","SAVE_USER","result","data","battleTag","charImg","SAVE_MSG","filter","e","_id","length","map","SAVE_POSTS","console","log","JSON","stringify"],"mappings":"4iCAAA,MAAO,GAAKA,CAAAA,WAAZ,KAA6B,mBAA7B,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,SAAS,CAAE,EADM,CAEjBC,IAAI,CAAE,EAFW,CAGjBC,KAAK,CAAE,EAHU,CAIjBC,KAAK,CAAE,IAJU,CAKjBC,IAAI,CAAE,EALW,CAArB,CAQA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBP,YAAyB,IAAXQ,CAAAA,MAAW,2CAE9C,OAAOA,MAAM,CAACC,IAAd,EAEI,IAAKV,CAAAA,WAAW,CAACW,SAAjB,CACI,wBACOH,KADP,EAEIN,SAAS,CAAEO,MAAM,CAACG,MAAP,CAAcC,IAAd,CAAmBC,SAFlC,CAGIX,IAAI,CAAEM,MAAM,CAACG,MAAP,CAAcC,IAAd,CAAmBE,OAH7B,CAIIX,KAAK,CAAEK,MAAM,CAACG,MAAP,CAAcC,IAAd,CAAmBT,KAJ9B,GAOJ;AACA,IAAKJ,CAAAA,WAAW,CAACgB,QAAjB,CACI,GAAIR,KAAK,CAACF,IAAN,CAAWW,MAAX,CAAkB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,GAAF,GAAUV,MAAM,CAACG,MAAP,CAAcC,IAAd,CAAmBM,GAAjC,EAAnB,EAAyDC,MAAzD,CAAkE,CAAtE,CAAyE,CACrE,GAAId,CAAAA,IAAI,CAAGE,KAAK,CAACF,IAAN,CAAWe,GAAX,CAAe,SAAAf,IAAI,CAAI,CAC9B,GAAIA,IAAI,CAACa,GAAL,EAAYV,MAAM,CAACG,MAAP,CAAcC,IAAd,CAAmBM,GAAnC,CAAuC,CACnC,MAAOb,CAAAA,IAAP,CACH,CACD,MAAOG,CAAAA,MAAM,CAACG,MAAP,CAAcC,IAArB,CACH,CALU,CAAX,CAMH,CAPD,IAOO,CACH,GAAIP,CAAAA,IAAI,8BAAOE,KAAK,CAACF,IAAb,GAAmBG,MAAM,CAACG,MAAP,CAAcC,IAAjC,EAAR,CACH,CACD,wBACOL,KADP,EAEIF,IAAI,CAAEA,IAFV,GAKJ;AACA,IAAKN,CAAAA,WAAW,CAACsB,UAAjB,CACAC,OAAO,CAACC,GAAR,CAAY,mCAAoCC,IAAI,CAACC,SAAL,CAAejB,MAAM,CAACG,MAAP,CAAcC,IAA7B,CAAhD,EACI,wBACOL,KADP,EAEIF,IAAI,CAAEG,MAAM,CAACG,MAAP,CAAcC,IAFxB,GA9BR,CAkCC,CAED,MAAOL,CAAAA,KAAP,CACH,CAvCD,CAyCA,cAAeD,CAAAA,OAAf","sourcesContent":["import * as actionTypes from '../action/actions';\n\nconst initialState = {\n    battletag: '',\n    icon: '',\n    guild: '',\n    token: null,\n    post: []\n};\n\nconst reducer = (state = initialState, action) => {\n\n    switch(action.type) {\n\n        case actionTypes.SAVE_USER:\n            return {\n                ...state, \n                battletag: action.result.data.battleTag,\n                icon: action.result.data.charImg,\n                guild: action.result.data.guild\n            };\n\n        //SAVING POSTS TO DB\n        case actionTypes.SAVE_MSG:\n            if (state.post.filter(e => e._id === action.result.data._id).length > 0) {\n                var post = state.post.map(post => {\n                    if (post._id != action.result.data._id){\n                        return post\n                    } \n                    return action.result.data\n                });\n            } else {\n                var post = [...state.post, action.result.data];\n            } \n            return {\n                ...state,\n                post: post\n            };\n        \n        //GETTING POSTS FROM DB (bad naming for case)\n        case actionTypes.SAVE_POSTS:\n        console.log(\"getting posts reached in reducer\"+ JSON.stringify(action.result.data));\n            return {\n                ...state, \n                post: action.result.data\n            };\n    };\n\n    return state;\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}